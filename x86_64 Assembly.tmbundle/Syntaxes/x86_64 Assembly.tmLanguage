<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>asm</string>
<<<<<<< HEAD:x86 Assembly.tmbundle/Syntaxes/x86 Assembly.tmLanguage
		<string>s</string>
=======
		<string>nasm</string>
		<string>yasm</string>
		<string>inc</string>
>>>>>>> 3d19704bb3e6171601e9905b2b9855c027ea5472:x86_64 Assembly.tmbundle/Syntaxes/x86_64 Assembly.tmLanguage
	</array>
	<key>name</key>
	<string>x86_64 Assembly</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>[;#].*$</string>
			<key>name</key>
			<string>comment.line</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*[\#%]\s*if\s+0\b</string>
			<key>end</key>
			<string>^\s*[\#%]\s*endif\b</string>
			<key>name</key>
			<string>comment.preprocessor</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(dword|qword|tword|db|dw|dd|dq|dt|do|dy|resb|resw|resd|resq|rest|reso|resy|incbin|equ|times)\b</string>
			<key>name</key>
			<string>support.type.asm</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\.(data|bss|text)$</string>
			<key>name</key>
			<string>string.section</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>["']</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.asm</string>
				</dict>
			</dict>
			<key>end</key>
			<string>["']</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.asm</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.asm</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*[#%]\s*(error|warning)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.error.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.preprocessor.diagnostic.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*[#%]\s*(include|import)\b\s+</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.include.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.c.include</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.include.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>&lt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.lt-gt.include.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*[%#]\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(%?(((a|b|c|d)h)|((a|b|c|d|di|si|bp|sp)l)|(((e|r)?((a|b|c|d)x|(di|si|bp|sp|ip)|flags))|cs|ds|ss|es|fs|gs|([xy]mm([0-9]|1[0-5]))|mxcsr|((st|mm|fpr)[0-7]))|(cr[02348])|(dr[0-367])|([gli]dtr?)|(r([89]|1[0-5])[bdlw]?)|tp?r))\b</string>
			<key>name</key>
			<string>storage.registers_intel</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(aaa|aad|aam|aas|adc|add|andn?|arpl|bl[cs](fill|ic?|msk)|blcs|blsr|bound|bsf|bsr|bswap|bt[crs]?|call|cbw|cwde?|cdqe?|cqo|clflush|cl(c|d|gi|i|ts)|cmc|cmp|cmps[bwdq]?|cmpxchg((8|16)b)?|cpuid|crc32|daa|das|dec|div|enter|f?emms|esc|getsec|hlt|idiv|imul|in|inc|ins[bwd]?|into?|inv(d|lpga?|pcid)|iret[dq]?|jmp|lahf|lar|l[defgs]s|lea|leave|[lms]fence|[ls][gil]dt|lmsw|lock|lods[bwdq]?|loop(n?[ez])?|ls[ls]|ltr|lwp(ins|val)|monitor|mov(be|d|q|dq2q|nti|ntq|q2dq|s[bwdqx]?|sxd|zx)|mul|neg|nop|not|or|out|outs[bwd]?|pause|(pop|push)(a|ad|f|fd|fq)?|popcnt|prefetch(nta|t[012]|w)?|r[co][lr]|(rd|wr)[fg]sbase|(rd|wr)msr|rdpmc|rdrand|rdtscp?|rep(n?[ez])?|retf?|rsm|sahf|s[ah][lr]|sbb|scas[bwd]|sh[lr]d|smsw|st(c|d|gi|i)|stos[bwdq]|str|sub|swapgs|sys(call|ret|enter|exit)|test|ud2|vbroadcast(f128|sd|ss)|vcvtph2ps|vcvtps2ph|ver[rw]|v(extract|insert|perm2)f128|vzero(all|upper)|[fm]?wait|wbinvd|xadd|xchg|xgetbv|xlatb?|xor|xrstor|xsave(opt)?|xsetbv)\b</string>	
			<key>name</key>
			<string>keyword.mnemonic32</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(bextr|extrq|insertq|llwpcb|lzcnt|skinit|slwpcb|t1mskc|tz(cnt|msk)|vm(load|mcall|run|save)|vpc(mov|omu?[bdqw])|vpmacss?(dd|dql|dqh|ww|wd)|vpmadcss?wd|vpperm|vprot[bdqw]|vpsh[al][bdqw]|pavgusb|pf(2i[dw]|acc|add|cmpeq|cmpgt|max|min|mul|p?nacc|rcp(it[12])?|rsqit1|rsqrt|subr?)|pi2f[dw]|pmulhrw|pswapd)\b</string>	
			<key>name</key>
			<string>keyword.mnemonic32amd</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(icebp|int1|smi)\b</string>	
			<key>name</key>
			<string>keyword.mnemonic32other</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((v)?(aesdec|aesdeclast|aesenc|aesenclast|aesimc|aeskeygenassist|cvtpd2(dq|pi|ps)|cvtps2(dq|pd|pi)|cvtsd2(si|ss)|cvtss2(sd|si)|cvtt(pd|ps)2(dq|pi)|cvtt(sd|ss)2si|extractps|insertps|ld(dqu|mxcsr)|maskmov(dqu|q)|mov((d|sh|hl)dup|dqa|dqu|hlps|lhps|ntdqa?|s[ds])|mpsadbw|pabs[bwd]|pack(s|u)s(wb|dw)|padd([bwdq]|u?s(b|w))|palignr|pandn?|pavg[bw]|pblend(vb|w)|pclmulqdq|pcmp((eq|gt)[bwdq]|[ei]str[im])|pextr[bwdq]|phadd(w|d|sw)|phminposuw|phsub(w|d|sw)|pinsr[bwdq]|pmadd(ubsw|wd)|p(max|min)[su][bdw]|pmov(mskb|([sz]x(b[dqw]|w[dq]|dq)))|pmul(dq|hrsw|hu?w|ld|lw|udq)|por|psadbw|pshuf[bdw]|pshuf[hl]w|psign[bwd]|ps[lr]l(dq|w|d|q)|psra[wd]|psub([bwdq]|u?s[bw])|ptest|punpck[hl](bw|wd|dq|qdq)|pxor|rcp[ps]s|rsqrt[ps]s|stmxcsr|ucomis[ds]))\b</string>	
			<key>name</key>
			<string>keyword.mnemonic64vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((v)?(add|cmp|div|max|min|mul|round|sqrt|sub)[ps][ds])\b</string>	
			<key>name</key>
			<string>keyword.mnemonic64vex_pd_ps_sd_ss</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(vf(((n?m(add|sub)|fm(addsub|subadd))(132|213|231)?)|rcz)[ps][ds])\b</string>	
			<key>name</key>
			<string>keyword.mnemonic64vex_pd_ps_sd_ss_amd</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((v)?(addsub|and|andn|blend|blendv|clflush|cmppd|cmpps|cmpsd|cmpss|cvt(dq|pi)2|dp|hadd|hsub|mov(a|h|l|msk|nt|u)|or|shuf|unpck[hl]|xor)p[ds])\b</string>	
			<key>name</key>
			<string>keyword.mnemonic64vex_pd_ps</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((v)?(comi|cvtsi2)s[ds])\b</string>	
			<key>name</key>
			<string>keyword.mnemonic64vex_sd_ss</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(v(maskmov|permil2?|test)p[ds])\b</string>	
			<key>name</key>
			<string>keyword.mnemonic64_pd_ps</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((cmov|set)((n?(a|ae|b|be|c|e|g|ge|l|le|o|p|s|z))|(pe|po)))\b</string>	
			<key>name</key>
			<string>keyword.mnemonic64cmov_set_cc</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(j((n?(a|ae|b|be|c|e|g|ge|l|le|o|p|s|z))|(cxz|ecxz|rcxz|pe|po)))\b</string>	
			<key>name</key>
			<string>keyword.mnemonic64jcc</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(f(2xm1|abs|add|addp|iadd|bld|bstp|chs|n?clex|cmovn?(b|e|be|u)|(u?comi?)p?|u?compp|cos|decstp|divr?p?|idivr?|free|icomp?|ild|incstp|n?init|ist(p|tp)?|ld(1|l2t|l2e|pi|lg2|ln2|z|cw|env)?|imul|mulp?|nop|p(atan|rem1?|tan)|rndint|rstor|n?save|scale|sin(cos)?|sqrt|stp?|n?st(cw|env|sw)|subr?p?|isubr?|tst|xam|xch|xrstor|xsave|xtract|yl2x(p1)?))\b</string>	
			<key>name</key>
			<string>keyword.mnemonic32fpu</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^\s*\.?\w+:\s*(?=$|;)</string>
			<key>name</key>
			<string>entity.name.label</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\$[0-9a-f]+\b</string>
			<key>name</key>
			<string>constant.numeric.literal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b[0-9]+\b</string>
			<key>name</key>
			<string>constant.numeric.dec</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([0-9a-fA-F]+h?|0x[0-9a-fA-F]+)\b</string>
			<key>name</key>
			<string>constant.numeric.hex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^\.?(globl|global)\b</string>
			<key>name</key>
			<string>entity.directive</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.asm.x86_64</string>
	<key>uuid</key>
	<string>05d6565d-991a-4e88-8e28-63bb21197f32</string>
</dict>
</plist>
